plugins {
    id 'net.minecraftforge.gradle' version '5.1.68'
}

ext {
    projectClasspath = file("$buildDir/bin/main")
}

project.version += '.' + '0'

configurations {
    containDep
    implementation.extendsFrom containDep
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            property 'effekseer.path', "D:\\Workspaces\\EffekseerForMultiLanguages\\build\\src\\cpp\\Debug" + '/EffekseerNativeForJava.dll'
            property 'file.encoding', 'UTF-8'
            property 'fml.coreMods.load', 'com.github.mrmks.mc.efscraft.forge.core.LoadingPlugin'

            mods {
                grouparticle {
                    source sourceSets.main
                }
            }

            args '--username', 'Player203'
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                grouparticle {
                    source sourceSets.main
                }
            }

            args '--username', 'Player203'
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDirs 'src/generated/resources', rootProject.file('lang') }

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    shade rootProject.project(':api')
    shade rootProject.project(':api-client'), {
        transitive = false
    }
    containDep "com.github.mrmks.effekseer4j:effekseer4j:$efscraftVer", {
        transitive = false
    }
}

processResources {
    inputs.property 'version', project.version
    filesMatching('mcmod.info') {
        expand 'version': project.version.toString()
    }
    rename 'en_us.lang', 'assets/efscraft/lang/en_us.lang'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    archiveClassifier.set 'forge-1.12.2'
    from( project.configurations.shade.collect { it.isDirectory() ? it : zipTree(it)} )
    manifest {
        attributes([
//                "Specification-Title"     : "EffekseerCraft",
                //"Specification-Vendor": "grouparticle authors",
//                "Specification-Version"   : "1", // We are version 1 of ourselves
//                "Implementation-Title"    : project.name,
//                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "grouparticle authors",
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin": "com.github.mrmks.mc.efscraft.forge.core.LoadingPlugin",
                "FMLCorePluginContainsFMLMod": true,
                "ContainedDeps": configurations.containDep.files.collect {it.name}.join(' ')
        ])
    }

    from project.configurations.containDep, {
        into 'META-INF/libraries'
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// remove default classpath and add combined classpath
sourceSets.main {
    runtimeClasspath = files(projectClasspath) + runtimeClasspath - output
}

// copy classes and resources to combined folder, then java can find resources by relative path
tasks.register 'makeBin', {
    mustRunAfter processResources, compileJava
    doLast {
        delete projectClasspath
        copy {
            from compileJava.destinationDirectory
            from processResources.destinationDir
            into projectClasspath
        }
    }
}

tasks.configureEach { Task task -> if (task.name == 'prepareRuns') task.dependsOn 'makeBin' }

tasks.withType(JavaExec).configureEach {
    if (it.name == "runClient" || it.name == "runServer") {
        it.javaLauncher.convention(javaToolchains.launcherFor {JavaToolchainSpec spec ->
            spec.vendor
        })
    }
}